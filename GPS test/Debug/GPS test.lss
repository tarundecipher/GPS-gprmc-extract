
GPS test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000023c  000002d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000023c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000064  00800106  00800106  000002d6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002d6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000308  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000096b  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000079b  00000000  00000000  00000d03  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ac  00000000  00000000  0000149e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d8  00000000  00000000  0000184c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000496  00000000  00000000  00001924  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000032a  00000000  00000000  00001dba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  000020e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e3       	ldi	r30, 0x3C	; 60
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 36       	cpi	r26, 0x6A	; 106
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <main>
  9e:	0c 94 1c 01 	jmp	0x238	; 0x238 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z10USART_Initv>:
#define BAUDRATE ((F_CPU)/(BAUD*16UL)-1)

void USART_Init(void)
{
	/*Set baud rate */
	UBRR0H = (BAUDRATE>>8);
  a6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = BAUDRATE;
  aa:	83 e3       	ldi	r24, 0x33	; 51
  ac:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

	UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
  b0:	e1 ec       	ldi	r30, 0xC1	; 193
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	88 61       	ori	r24, 0x18	; 24
  b8:	80 83       	st	Z, r24
	/* Set frame format: 8data, 2stop bit */
	UCSR0C |= (1<<USBS0)|(3<<UCSZ00);
  ba:	e2 ec       	ldi	r30, 0xC2	; 194
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	8e 60       	ori	r24, 0x0E	; 14
  c2:	80 83       	st	Z, r24
  c4:	08 95       	ret

000000c6 <_Z14USART_Transmith>:
}

void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
  c6:	e0 ec       	ldi	r30, 0xC0	; 192
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	90 81       	ld	r25, Z
  cc:	95 ff       	sbrs	r25, 5
  ce:	fd cf       	rjmp	.-6      	; 0xca <_Z14USART_Transmith+0x4>

		/* Put data into buffer, sends the data */
		UDR0 = data;
  d0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  d4:	08 95       	ret

000000d6 <_Z13USART_Receivev>:
}

unsigned char USART_Receive(void)
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
  d6:	e0 ec       	ldi	r30, 0xC0	; 192
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	88 23       	and	r24, r24
  de:	ec f7       	brge	.-6      	; 0xda <_Z13USART_Receivev+0x4>

		/* Get and return received data from buffer */
		return UDR0;
  e0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

}
  e4:	08 95       	ret

000000e6 <_Z11Send_StringPc>:
#include <avr/io.h>
#include "USART.h"
#include <util/delay.h>
#include <string.h>

void Send_String(char ar[]){
  e6:	cf 93       	push	r28
  e8:	df 93       	push	r29
  ea:	ec 01       	movw	r28, r24
	int i;
	i=0;
	while(ar[i]!='\0'){
  ec:	88 81       	ld	r24, Y
  ee:	88 23       	and	r24, r24
  f0:	31 f0       	breq	.+12     	; 0xfe <_Z11Send_StringPc+0x18>
  f2:	21 96       	adiw	r28, 0x01	; 1
		USART_Transmit(ar[i]);
  f4:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z14USART_Transmith>
#include <string.h>

void Send_String(char ar[]){
	int i;
	i=0;
	while(ar[i]!='\0'){
  f8:	89 91       	ld	r24, Y+
  fa:	81 11       	cpse	r24, r1
  fc:	fb cf       	rjmp	.-10     	; 0xf4 <_Z11Send_StringPc+0xe>
		USART_Transmit(ar[i]);
		i++;
	}
}
  fe:	df 91       	pop	r29
 100:	cf 91       	pop	r28
 102:	08 95       	ret

00000104 <_Z13Return_StringPc>:



void Return_String(char *str){
 104:	ef 92       	push	r14
 106:	ff 92       	push	r15
 108:	0f 93       	push	r16
 10a:	1f 93       	push	r17
 10c:	cf 93       	push	r28
 10e:	df 93       	push	r29
 110:	7c 01       	movw	r14, r24
 112:	8c 01       	movw	r16, r24
 114:	08 53       	subi	r16, 0x38	; 56
 116:	1f 4f       	sbci	r17, 0xFF	; 255
 118:	ec 01       	movw	r28, r24
	for(int i=0;i<200;i++){
		
		*str = USART_Receive();
 11a:	0e 94 6b 00 	call	0xd6	; 0xd6 <_Z13USART_Receivev>
 11e:	89 93       	st	Y+, r24
}



void Return_String(char *str){
	for(int i=0;i<200;i++){
 120:	0c 17       	cp	r16, r28
 122:	1d 07       	cpc	r17, r29
 124:	d1 f7       	brne	.-12     	; 0x11a <_Z13Return_StringPc+0x16>
		
		*str = USART_Receive();
		
		str++;
	}
	*str='\0';
 126:	f7 01       	movw	r30, r14
 128:	e8 53       	subi	r30, 0x38	; 56
 12a:	ff 4f       	sbci	r31, 0xFF	; 255
 12c:	10 82       	st	Z, r1
	
}
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	1f 91       	pop	r17
 134:	0f 91       	pop	r16
 136:	ff 90       	pop	r15
 138:	ef 90       	pop	r14
 13a:	08 95       	ret

0000013c <_Z12return_gprmcPc>:

	char GPRMC[100];
void return_gprmc(char *str){
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	cd b7       	in	r28, 0x3d	; 61
 142:	de b7       	in	r29, 0x3e	; 62
 144:	c8 5c       	subi	r28, 0xC8	; 200
 146:	d1 09       	sbc	r29, r1
 148:	0f b6       	in	r0, 0x3f	; 63
 14a:	f8 94       	cli
 14c:	de bf       	out	0x3e, r29	; 62
 14e:	0f be       	out	0x3f, r0	; 63
 150:	cd bf       	out	0x3d, r28	; 61
 152:	dc 01       	movw	r26, r24
 154:	fe 01       	movw	r30, r28
 156:	31 96       	adiw	r30, 0x01	; 1
 158:	9e 01       	movw	r18, r28
 15a:	27 53       	subi	r18, 0x37	; 55
 15c:	3f 4f       	sbci	r19, 0xFF	; 255
	char temparr[200];

	for(int i=0;i<200;i++){
		temparr[i]=*str;
 15e:	8d 91       	ld	r24, X+
 160:	81 93       	st	Z+, r24

	char GPRMC[100];
void return_gprmc(char *str){
	char temparr[200];

	for(int i=0;i<200;i++){
 162:	e2 17       	cp	r30, r18
 164:	f3 07       	cpc	r31, r19
 166:	d9 f7       	brne	.-10     	; 0x15e <_Z12return_gprmcPc+0x22>
		temparr[i]=*str;
		str++;
		
	}

	char *loc = strstr(temparr,"GPRMC");
 168:	60 e0       	ldi	r22, 0x00	; 0
 16a:	71 e0       	ldi	r23, 0x01	; 1
 16c:	ce 01       	movw	r24, r28
 16e:	01 96       	adiw	r24, 0x01	; 1
 170:	0e 94 02 01 	call	0x204	; 0x204 <strstr>
 174:	fc 01       	movw	r30, r24

	
	int i=0;
	if(loc){
 176:	89 2b       	or	r24, r25
 178:	a9 f0       	breq	.+42     	; 0x1a4 <_Z12return_gprmcPc+0x68>
		while((*loc!='\n')){
 17a:	90 81       	ld	r25, Z
 17c:	9a 30       	cpi	r25, 0x0A	; 10
 17e:	61 f0       	breq	.+24     	; 0x198 <_Z12return_gprmcPc+0x5c>
 180:	a6 e0       	ldi	r26, 0x06	; 6
 182:	b1 e0       	ldi	r27, 0x01	; 1
 184:	31 96       	adiw	r30, 0x01	; 1
 186:	20 e0       	ldi	r18, 0x00	; 0
 188:	30 e0       	ldi	r19, 0x00	; 0
			GPRMC[i]=*loc;
 18a:	9d 93       	st	X+, r25
			//USART_Transmit(GPRMC[i]);
			i++;
 18c:	2f 5f       	subi	r18, 0xFF	; 255
 18e:	3f 4f       	sbci	r19, 0xFF	; 255
	char *loc = strstr(temparr,"GPRMC");

	
	int i=0;
	if(loc){
		while((*loc!='\n')){
 190:	91 91       	ld	r25, Z+
 192:	9a 30       	cpi	r25, 0x0A	; 10
 194:	d1 f7       	brne	.-12     	; 0x18a <_Z12return_gprmcPc+0x4e>
 196:	02 c0       	rjmp	.+4      	; 0x19c <_Z12return_gprmcPc+0x60>
 198:	20 e0       	ldi	r18, 0x00	; 0
 19a:	30 e0       	ldi	r19, 0x00	; 0
			GPRMC[i]=*loc;
			//USART_Transmit(GPRMC[i]);
			i++;
			loc++;
		}
		GPRMC[i]='\0';
 19c:	f9 01       	movw	r30, r18
 19e:	ea 5f       	subi	r30, 0xFA	; 250
 1a0:	fe 4f       	sbci	r31, 0xFE	; 254
 1a2:	10 82       	st	Z, r1

	}
	else{}
	
	
}
 1a4:	c8 53       	subi	r28, 0x38	; 56
 1a6:	df 4f       	sbci	r29, 0xFF	; 255
 1a8:	0f b6       	in	r0, 0x3f	; 63
 1aa:	f8 94       	cli
 1ac:	de bf       	out	0x3e, r29	; 62
 1ae:	0f be       	out	0x3f, r0	; 63
 1b0:	cd bf       	out	0x3d, r28	; 61
 1b2:	df 91       	pop	r29
 1b4:	cf 91       	pop	r28
 1b6:	08 95       	ret

000001b8 <main>:



int main(void)
{	USART_Init();
 1b8:	cf 93       	push	r28
 1ba:	df 93       	push	r29
 1bc:	cd b7       	in	r28, 0x3d	; 61
 1be:	de b7       	in	r29, 0x3e	; 62
 1c0:	c8 5c       	subi	r28, 0xC8	; 200
 1c2:	d1 09       	sbc	r29, r1
 1c4:	0f b6       	in	r0, 0x3f	; 63
 1c6:	f8 94       	cli
 1c8:	de bf       	out	0x3e, r29	; 62
 1ca:	0f be       	out	0x3f, r0	; 63
 1cc:	cd bf       	out	0x3d, r28	; 61
 1ce:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z10USART_Initv>
    /* Replace with your application code */
    while (1) 
    {
		char str[200];
		
		Return_String(str);
 1d2:	ce 01       	movw	r24, r28
 1d4:	01 96       	adiw	r24, 0x01	; 1
 1d6:	0e 94 82 00 	call	0x104	; 0x104 <_Z13Return_StringPc>
		return_gprmc(str);
 1da:	ce 01       	movw	r24, r28
 1dc:	01 96       	adiw	r24, 0x01	; 1
 1de:	0e 94 9e 00 	call	0x13c	; 0x13c <_Z12return_gprmcPc>
			Send_String(GPRMC);
 1e2:	86 e0       	ldi	r24, 0x06	; 6
 1e4:	91 e0       	ldi	r25, 0x01	; 1
 1e6:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z11Send_StringPc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ea:	2f ef       	ldi	r18, 0xFF	; 255
 1ec:	89 e6       	ldi	r24, 0x69	; 105
 1ee:	98 e1       	ldi	r25, 0x18	; 24
 1f0:	21 50       	subi	r18, 0x01	; 1
 1f2:	80 40       	sbci	r24, 0x00	; 0
 1f4:	90 40       	sbci	r25, 0x00	; 0
 1f6:	e1 f7       	brne	.-8      	; 0x1f0 <main+0x38>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <main+0x42>
 1fa:	00 00       	nop
			_delay_ms(1000);
			USART_Transmit('\n');
 1fc:	8a e0       	ldi	r24, 0x0A	; 10
 1fe:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z14USART_Transmith>
 202:	e7 cf       	rjmp	.-50     	; 0x1d2 <main+0x1a>

00000204 <strstr>:
 204:	fb 01       	movw	r30, r22
 206:	51 91       	ld	r21, Z+
 208:	55 23       	and	r21, r21
 20a:	a9 f0       	breq	.+42     	; 0x236 <strstr+0x32>
 20c:	bf 01       	movw	r22, r30
 20e:	dc 01       	movw	r26, r24
 210:	4d 91       	ld	r20, X+
 212:	45 17       	cp	r20, r21
 214:	41 11       	cpse	r20, r1
 216:	e1 f7       	brne	.-8      	; 0x210 <strstr+0xc>
 218:	59 f4       	brne	.+22     	; 0x230 <strstr+0x2c>
 21a:	cd 01       	movw	r24, r26
 21c:	01 90       	ld	r0, Z+
 21e:	00 20       	and	r0, r0
 220:	49 f0       	breq	.+18     	; 0x234 <strstr+0x30>
 222:	4d 91       	ld	r20, X+
 224:	40 15       	cp	r20, r0
 226:	41 11       	cpse	r20, r1
 228:	c9 f3       	breq	.-14     	; 0x21c <strstr+0x18>
 22a:	fb 01       	movw	r30, r22
 22c:	41 11       	cpse	r20, r1
 22e:	ef cf       	rjmp	.-34     	; 0x20e <strstr+0xa>
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	01 97       	sbiw	r24, 0x01	; 1
 236:	08 95       	ret

00000238 <_exit>:
 238:	f8 94       	cli

0000023a <__stop_program>:
 23a:	ff cf       	rjmp	.-2      	; 0x23a <__stop_program>
