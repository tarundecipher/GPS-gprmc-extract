
GPS test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000024a  000002de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000024a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000064  00800106  00800106  000002e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000314  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000995  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007b9  00000000  00000000  00000d39  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003a5  00000000  00000000  000014f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  00001898  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a0  00000000  00000000  00001968  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000319  00000000  00000000  00001e08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00002121  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e4       	ldi	r30, 0x4A	; 74
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 36       	cpi	r26, 0x6A	; 106
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 dd 00 	call	0x1ba	; 0x1ba <main>
  9e:	0c 94 23 01 	jmp	0x246	; 0x246 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z10USART_Initv>:
#define BAUDRATE ((F_CPU)/(BAUD*16UL)-1)

void USART_Init(void)
{
	/*Set baud rate */
	UBRR0H = (BAUDRATE>>8);
  a6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = BAUDRATE;
  aa:	83 e3       	ldi	r24, 0x33	; 51
  ac:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

	UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
  b0:	e1 ec       	ldi	r30, 0xC1	; 193
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	88 61       	ori	r24, 0x18	; 24
  b8:	80 83       	st	Z, r24
	/* Set frame format: 8data, 2stop bit */
	UCSR0C |= (1<<USBS0)|(3<<UCSZ00);
  ba:	e2 ec       	ldi	r30, 0xC2	; 194
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	8e 60       	ori	r24, 0x0E	; 14
  c2:	80 83       	st	Z, r24
  c4:	08 95       	ret

000000c6 <_Z14USART_Transmith>:
}

void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
  c6:	e0 ec       	ldi	r30, 0xC0	; 192
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	90 81       	ld	r25, Z
  cc:	95 ff       	sbrs	r25, 5
  ce:	fd cf       	rjmp	.-6      	; 0xca <_Z14USART_Transmith+0x4>

		/* Put data into buffer, sends the data */
		UDR0 = data;
  d0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  d4:	08 95       	ret

000000d6 <_Z13USART_Receivev>:
}

unsigned char USART_Receive(void)
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
  d6:	e0 ec       	ldi	r30, 0xC0	; 192
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	88 23       	and	r24, r24
  de:	ec f7       	brge	.-6      	; 0xda <_Z13USART_Receivev+0x4>

		/* Get and return received data from buffer */
		return UDR0;
  e0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

}
  e4:	08 95       	ret

000000e6 <_Z11Send_StringPc>:
#include <avr/io.h>
#include "USART.h"
#include <util/delay.h>
#include <string.h>

void Send_String(char ar[]){
  e6:	cf 93       	push	r28
  e8:	df 93       	push	r29
  ea:	ec 01       	movw	r28, r24
	int i;
	i=0;
	while(ar[i]!='\0'){
  ec:	88 81       	ld	r24, Y
  ee:	88 23       	and	r24, r24
  f0:	31 f0       	breq	.+12     	; 0xfe <_Z11Send_StringPc+0x18>
  f2:	21 96       	adiw	r28, 0x01	; 1
		USART_Transmit(ar[i]);
  f4:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z14USART_Transmith>
#include <string.h>

void Send_String(char ar[]){
	int i;
	i=0;
	while(ar[i]!='\0'){
  f8:	89 91       	ld	r24, Y+
  fa:	81 11       	cpse	r24, r1
  fc:	fb cf       	rjmp	.-10     	; 0xf4 <_Z11Send_StringPc+0xe>
		USART_Transmit(ar[i]);
		i++;
	}
}
  fe:	df 91       	pop	r29
 100:	cf 91       	pop	r28
 102:	08 95       	ret

00000104 <_Z13Return_StringPc>:


void Return_String(char *str){
 104:	0f 93       	push	r16
 106:	1f 93       	push	r17
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	ec 01       	movw	r28, r24
 10e:	8c 01       	movw	r16, r24
 110:	0c 59       	subi	r16, 0x9C	; 156
 112:	1f 4f       	sbci	r17, 0xFF	; 255
	for(int i=0;i<100;i++){

		*str = USART_Receive();
 114:	0e 94 6b 00 	call	0xd6	; 0xd6 <_Z13USART_Receivev>
 118:	89 93       	st	Y+, r24
	}
}


void Return_String(char *str){
	for(int i=0;i<100;i++){
 11a:	0c 17       	cp	r16, r28
 11c:	1d 07       	cpc	r17, r29
 11e:	d1 f7       	brne	.-12     	; 0x114 <_Z13Return_StringPc+0x10>

		*str = USART_Receive();
		str++;
	}
	
}
 120:	df 91       	pop	r29
 122:	cf 91       	pop	r28
 124:	1f 91       	pop	r17
 126:	0f 91       	pop	r16
 128:	08 95       	ret

0000012a <_Z9Get_gprmcPc>:
char GPRMC[100];

void Get_gprmc(char *str){
 12a:	0f 93       	push	r16
 12c:	1f 93       	push	r17
 12e:	cf 93       	push	r28
 130:	df 93       	push	r29
 132:	cd b7       	in	r28, 0x3d	; 61
 134:	de b7       	in	r29, 0x3e	; 62
 136:	c4 56       	subi	r28, 0x64	; 100
 138:	d1 09       	sbc	r29, r1
 13a:	0f b6       	in	r0, 0x3f	; 63
 13c:	f8 94       	cli
 13e:	de bf       	out	0x3e, r29	; 62
 140:	0f be       	out	0x3f, r0	; 63
 142:	cd bf       	out	0x3d, r28	; 61
 144:	8c 01       	movw	r16, r24
 146:	dc 01       	movw	r26, r24
 148:	fe 01       	movw	r30, r28
 14a:	31 96       	adiw	r30, 0x01	; 1
 14c:	9e 01       	movw	r18, r28
 14e:	2b 59       	subi	r18, 0x9B	; 155
 150:	3f 4f       	sbci	r19, 0xFF	; 255
	char tempstr[100];
	char *tempptr = str;
	for(int i=0;i<100;i++){
		tempstr[i] = *str;
 152:	8d 91       	ld	r24, X+
 154:	81 93       	st	Z+, r24
char GPRMC[100];

void Get_gprmc(char *str){
	char tempstr[100];
	char *tempptr = str;
	for(int i=0;i<100;i++){
 156:	e2 17       	cp	r30, r18
 158:	f3 07       	cpc	r31, r19
 15a:	d9 f7       	brne	.-10     	; 0x152 <_Z9Get_gprmcPc+0x28>
		tempstr[i] = *str;
		str++;
	}
	char *gprmc = strstr(tempstr,"GPRMC");
 15c:	60 e0       	ldi	r22, 0x00	; 0
 15e:	71 e0       	ldi	r23, 0x01	; 1
 160:	ce 01       	movw	r24, r28
 162:	01 96       	adiw	r24, 0x01	; 1
 164:	0e 94 09 01 	call	0x212	; 0x212 <strstr>
	int position = tempptr-gprmc;
 168:	98 01       	movw	r18, r16
 16a:	28 1b       	sub	r18, r24
 16c:	39 0b       	sbc	r19, r25
	

	while(tempstr[position]!='$'){
 16e:	e1 e0       	ldi	r30, 0x01	; 1
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	ec 0f       	add	r30, r28
 174:	fd 1f       	adc	r31, r29
 176:	e2 0f       	add	r30, r18
 178:	f3 1f       	adc	r31, r19
 17a:	90 81       	ld	r25, Z
 17c:	94 32       	cpi	r25, 0x24	; 36
 17e:	69 f0       	breq	.+26     	; 0x19a <_Z9Get_gprmcPc+0x70>
 180:	d9 01       	movw	r26, r18
 182:	aa 5f       	subi	r26, 0xFA	; 250
 184:	be 4f       	sbci	r27, 0xFE	; 254
 186:	fe 01       	movw	r30, r28
 188:	e2 0f       	add	r30, r18
 18a:	f3 1f       	adc	r31, r19
 18c:	32 96       	adiw	r30, 0x02	; 2
		GPRMC[position] = tempstr[position];
 18e:	9d 93       	st	X+, r25
		position++;
 190:	2f 5f       	subi	r18, 0xFF	; 255
 192:	3f 4f       	sbci	r19, 0xFF	; 255
	}
	char *gprmc = strstr(tempstr,"GPRMC");
	int position = tempptr-gprmc;
	

	while(tempstr[position]!='$'){
 194:	91 91       	ld	r25, Z+
 196:	94 32       	cpi	r25, 0x24	; 36
 198:	d1 f7       	brne	.-12     	; 0x18e <_Z9Get_gprmcPc+0x64>
		GPRMC[position] = tempstr[position];
		position++;
	}
	GPRMC[position]='\0';
 19a:	f9 01       	movw	r30, r18
 19c:	ea 5f       	subi	r30, 0xFA	; 250
 19e:	fe 4f       	sbci	r31, 0xFE	; 254
 1a0:	10 82       	st	Z, r1
	
}
 1a2:	cc 59       	subi	r28, 0x9C	; 156
 1a4:	df 4f       	sbci	r29, 0xFF	; 255
 1a6:	0f b6       	in	r0, 0x3f	; 63
 1a8:	f8 94       	cli
 1aa:	de bf       	out	0x3e, r29	; 62
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	cd bf       	out	0x3d, r28	; 61
 1b0:	df 91       	pop	r29
 1b2:	cf 91       	pop	r28
 1b4:	1f 91       	pop	r17
 1b6:	0f 91       	pop	r16
 1b8:	08 95       	ret

000001ba <main>:

int main(void)
{	USART_Init();
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	cd b7       	in	r28, 0x3d	; 61
 1c0:	de b7       	in	r29, 0x3e	; 62
 1c2:	c4 56       	subi	r28, 0x64	; 100
 1c4:	d1 09       	sbc	r29, r1
 1c6:	0f b6       	in	r0, 0x3f	; 63
 1c8:	f8 94       	cli
 1ca:	de bf       	out	0x3e, r29	; 62
 1cc:	0f be       	out	0x3f, r0	; 63
 1ce:	cd bf       	out	0x3d, r28	; 61
 1d0:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z10USART_Initv>
    /* Replace with your application code */
    while (1) 
    {	
		char str[100];
		
		Return_String(str);
 1d4:	ce 01       	movw	r24, r28
 1d6:	01 96       	adiw	r24, 0x01	; 1
 1d8:	0e 94 82 00 	call	0x104	; 0x104 <_Z13Return_StringPc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1dc:	2f ef       	ldi	r18, 0xFF	; 255
 1de:	81 e1       	ldi	r24, 0x11	; 17
 1e0:	9a e7       	ldi	r25, 0x7A	; 122
 1e2:	21 50       	subi	r18, 0x01	; 1
 1e4:	80 40       	sbci	r24, 0x00	; 0
 1e6:	90 40       	sbci	r25, 0x00	; 0
 1e8:	e1 f7       	brne	.-8      	; 0x1e2 <main+0x28>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <main+0x32>
 1ec:	00 00       	nop
		_delay_ms(5000);
		Get_gprmc(str);
 1ee:	ce 01       	movw	r24, r28
 1f0:	01 96       	adiw	r24, 0x01	; 1
 1f2:	0e 94 95 00 	call	0x12a	; 0x12a <_Z9Get_gprmcPc>
 1f6:	2f ef       	ldi	r18, 0xFF	; 255
 1f8:	89 e6       	ldi	r24, 0x69	; 105
 1fa:	98 e1       	ldi	r25, 0x18	; 24
 1fc:	21 50       	subi	r18, 0x01	; 1
 1fe:	80 40       	sbci	r24, 0x00	; 0
 200:	90 40       	sbci	r25, 0x00	; 0
 202:	e1 f7       	brne	.-8      	; 0x1fc <main+0x42>
 204:	00 c0       	rjmp	.+0      	; 0x206 <main+0x4c>
 206:	00 00       	nop
		_delay_ms(1000);
		Send_String(GPRMC);
 208:	86 e0       	ldi	r24, 0x06	; 6
 20a:	91 e0       	ldi	r25, 0x01	; 1
 20c:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z11Send_StringPc>
 210:	e1 cf       	rjmp	.-62     	; 0x1d4 <main+0x1a>

00000212 <strstr>:
 212:	fb 01       	movw	r30, r22
 214:	51 91       	ld	r21, Z+
 216:	55 23       	and	r21, r21
 218:	a9 f0       	breq	.+42     	; 0x244 <strstr+0x32>
 21a:	bf 01       	movw	r22, r30
 21c:	dc 01       	movw	r26, r24
 21e:	4d 91       	ld	r20, X+
 220:	45 17       	cp	r20, r21
 222:	41 11       	cpse	r20, r1
 224:	e1 f7       	brne	.-8      	; 0x21e <strstr+0xc>
 226:	59 f4       	brne	.+22     	; 0x23e <strstr+0x2c>
 228:	cd 01       	movw	r24, r26
 22a:	01 90       	ld	r0, Z+
 22c:	00 20       	and	r0, r0
 22e:	49 f0       	breq	.+18     	; 0x242 <strstr+0x30>
 230:	4d 91       	ld	r20, X+
 232:	40 15       	cp	r20, r0
 234:	41 11       	cpse	r20, r1
 236:	c9 f3       	breq	.-14     	; 0x22a <strstr+0x18>
 238:	fb 01       	movw	r30, r22
 23a:	41 11       	cpse	r20, r1
 23c:	ef cf       	rjmp	.-34     	; 0x21c <strstr+0xa>
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	01 97       	sbiw	r24, 0x01	; 1
 244:	08 95       	ret

00000246 <_exit>:
 246:	f8 94       	cli

00000248 <__stop_program>:
 248:	ff cf       	rjmp	.-2      	; 0x248 <__stop_program>
